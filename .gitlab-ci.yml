variables:
    REACT_APP_CHAIN_ID: $CHAIN_ID
    REACT_APP_CLONE_FACTORY: $CLONE_FACTORY_ADDRESS
    REACT_APP_ETHERSCAN_URL: $ETHERSCAN_URL
    REACT_APP_LUMERIN_TOKEN_ADDRESS: $LUMERIN_TOKEN_ADDRESS
    REACT_APP_VALIDATOR_URL: $VALIDATOR_URL
    REACT_APP_VALIDATOR_PUBLIC_KEY: $VALIDATOR_PUBLICKEY

stages:
    - develop
    - review
    - deploy
default:
    before_script:
        - echo "*****************************"
        - echo "Updating lumerin.json"
        - echo "*****************************"
        - sed -i -e "s/LUMERIN_TOKEN_ADDRESS_VAR/${REACT_APP_LUMERIN_TOKEN_ADDRESS}/g" src/contracts/Lumerin.json
        
        - echo "*****************************"
        - echo "Logging in to Titanio-NET ECR ..."
        - echo "*****************************"
        - docker system prune -af
        - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $CI_AWS_TitanIO_NET_ECR
        
        - echo "*****************************"
        - echo "Combined Repo and Tag....."
        - echo "*****************************"
        - IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"
        - echo $CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$IMAGE_TAG
        
        - echo "*****************************"
        - echo "Building image..."
        - echo "*****************************"
        - docker build 
          --build-arg REACT_APP_CHAIN_ID=$REACT_APP_CHAIN_ID
          --build-arg REACT_APP_CLONE_FACTORY=$REACT_APP_CLONE_FACTORY
          --build-arg REACT_APP_ETHERSCAN_URL=$REACT_APP_ETHERSCAN_URL
          --build-arg REACT_APP_LUMERIN_TOKEN_ADDRESS=$REACT_APP_LUMERIN_TOKEN_ADDRESS
          --build-arg REACT_APP_VALIDATOR_URL=$REACT_APP_VALIDATOR_URL
          --build-arg REACT_APP_VALIDATOR_PUBLIC_KEY=$REACT_APP_VALIDATOR_PUBLIC_KEY
          -t $CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$IMAGE_TAG --no-cache .
        
        - echo "*****************************"
        - echo "Pushing image..."
        - echo "*****************************"
        - docker push $CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$IMAGE_TAG
        
        - echo "*****************************"
        - echo "Preparing deployment of $CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$IMAGE_TAG to $TGT_ACCOUNT, titanio-$TGT_ENV Environment..."
        - echo "*****************************"
        - aws ecs describe-task-definition --region $AWS_DEFAULT_REGION --task-definition $CI_AWS_ECS_TASK_DEFINITION > input.json
        - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].image='\"$CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$IMAGE_TAG\") > input.json
        - echo $(cat input.json | jq '.taskDefinition') > input.json
        - echo $(cat input.json | jq  'del(.taskDefinitionArn)' | jq 'del(.revision)' | jq 'del(.status)' | jq 'del(.requiresAttributes)' | jq 'del(.compatibilities)' | jq 'del(.registeredBy)' | jq 'del(.registeredAt)') > input.json
        - sed -i 's/'$CI_AWS_ACCOUNT_SBX'/'$TGT_ACCOUNT'/g' input.json
        - echo "Review input.json file...."
        - cat input.json | jq .
        
        - echo "*****************************"
        - echo "Deploying new container definition..."
        - echo "*****************************"
        - aws ecs register-task-definition --region $AWS_DEFAULT_REGION --cli-input-json file://input.json
        - REVISION=$(aws ecs describe-task-definition --task-definition $CI_AWS_ECS_TASK_DEFINITION --region $AWS_DEFAULT_REGION | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/"$//' | cut -d "," -f 1)
        - echo $REVISION
        - echo "Review Cluster Definition...."
        - echo $CI_AWS_ECS_CLUSTER_PREFIX-$TGT_ENV-$CI_AWS_ECS_CLUSTER_REGION
        - echo "Review Service Definition...."
        - echo $CI_AWS_ECS_SERVICE
        - aws ecs update-service --region $AWS_DEFAULT_REGION --cluster $CI_AWS_ECS_CLUSTER_PREFIX-$TGT_ENV-$CI_AWS_ECS_CLUSTER_REGION --service $CI_AWS_ECS_SERVICE_GLB --task-definition $CI_AWS_ECS_TASK_DEFINITION:$REVISION

bedrock-02-dev:
    environment: dev
    stage: develop
    only:
        - dev
    image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
    tags:
        - devops
        - bedrock
        - titanio-dev
        - shell
    variables:
        TGT_ACCOUNT: $CI_AWS_ACCOUNT_DEV
        TGT_ENV: dev
    script: echo "$TGT_ENV Updated"

titanio-03-stg:
    environment: stg
    stage: review
    only:
        - stg
    image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
    tags:
        - devops
        - bedrock
        - titanio-stg
        - shell
    variables:
        TGT_ACCOUNT: $CI_AWS_ACCOUNT_STG
        TGT_ENV: stg
    script: echo "$TGT_ENV Updated"

titanio-04-lmn-PROD:
    environment: lmn
    stage: deploy
    only:
        - main
    when: manual
    image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
    tags:
        - devops
        - bedrock
        - titanio-lmn
        - shell
    variables:
        TGT_ACCOUNT: $CI_AWS_ACCOUNT_LMN
        TGT_ENV: lmn
    script: echo "$TGT_ENV Updated"