name: CI-CD

on:
  workflow_dispatch:

  push:
    branches:
      - main
      - stg
      - dev
      - cicd/*

    paths: [".github/**", "src/**", "Dockerfile", "package.json", "LICENSE", "README.md"]

  pull_request:
    types: [opened, reopened, synchronize]
    paths: [".github/**", "src/**", "Dockerfile", "package.json", "LICENSE", "README.md"]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  TEST_ENV_VAR: "test"

jobs:
  Generate-Tag:
    runs-on: ubuntu-latest
    name: Generate Tag Name
    outputs:
      tag_name: ${{ steps.gen_tag_name.outputs.tag_name }}
      vtag: ${{ steps.gen_tag_name.outputs.vtag }}
      vfull: ${{ steps.gen_tag_name.outputs.vfull }}
      artifacts_base_url: ${{ github.server_url }}/${{ github.repository }}/releases/download/${{ steps.gen_tag_name.outputs.tag_name }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Determine tag name
        id: gen_tag_name
        shell: bash
        run: |
          VMAJ_NEW=2
          VMIN_NEW=0
          VPAT_NEW=0
          set +o pipefail
          VLAST=$(git describe --tags --abbrev=0 --match='v[1-9]*' refs/remotes/origin/main 2>/dev/null | cut -c2-)

          if [ -n "$VLAST" ]; then
              eval $(echo "$VLAST" | awk -F '.' '{print "VMAJ="$1" VMIN="$2" VPAT="$3}')
          else
              VMAJ=0
              VMIN=0
              VPAT=0
          fi
          
          # Force dev branch to use version 2.0.x
          if [ "$GITHUB_REF_NAME" = "dev" ]; then
              VMAJ=2
              VMIN=0
              VPAT=0
          fi

          if [ "$GITHUB_REF_NAME" = "main" ]; then
              if [ "$VMAJ_NEW" -gt "$VMAJ" ]; then
                  VMAJ=$VMAJ_NEW
                  VMIN=$VMIN_NEW
                  VPAT=$VPAT_NEW
              else
                  VMIN=$((VMIN+1))
                  VPAT=0
              fi
              VFULL=${VMAJ}.${VMIN}.${VPAT}
              VTAG=v$VFULL
          else
              MB=$(git merge-base refs/remotes/origin/main HEAD)
              VPAT=$(git rev-list --count --no-merges ${MB}..HEAD)
              VFULL=${VMAJ}.${VMIN}.${VPAT}
              RNAME=${GITHUB_REF_NAME##*/}
              [ "$GITHUB_EVENT_NAME" = "pull_request" ] && RNAME=pr${GITHUB_REF_NAME%/merge}
              VTAG=v${VFULL}-${RNAME}
          fi

          # Output variables for use in subsequent jobs environment
          echo "::set-output name=tag_name::${VTAG}"
          echo "::set-output name=vtag::${VTAG}"
          echo "::set-output name=vfull::${VFULL}"
          echo "✅ New Build Tag: $VTAG" >> $GITHUB_STEP_SUMMARY
          echo "❌ Old Major Tag: $VLAST"  >> $GITHUB_STEP_SUMMARY

  Create-GitHub-Release:
    name: Create GitHub Release
    if: |
      (
        (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/stg')) ||
        (github.event_name == 'workflow_dispatch')
      )
    needs:
      - Generate-Tag
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and push tag
        run: |
          TAG_NAME=${{ needs.Generate-Tag.outputs.tag_name }}
          echo "Creating and pushing tag: $TAG_NAME"
          
          # Check if tag already exists
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists, skipping tag creation"
          else
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
            git push origin "$TAG_NAME"
            echo "✅ Tag $TAG_NAME created and pushed"
          fi

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.Generate-Tag.outputs.tag_name }}
          release_name: Release ${{ needs.Generate-Tag.outputs.tag_name }}
          body: |
            ## Release ${{ needs.Generate-Tag.outputs.tag_name }}
            
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            
            ### Changes
            This release includes the latest changes from the ${{ github.ref_name }} branch.
            
          draft: false
          prerelease: ${{ github.ref != 'refs/heads/main' }}

  GitLab-Deploy-Marketplace:
    name: Deploy Marketplace to GitLab
    if: |
      (
        (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/stg'))
      )
    needs:
      - Generate-Tag
      # - GHCR-Build-and-Push
    runs-on: ubuntu-latest
    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Trigger GitLab Pipeline
        run: |
          BUILDTAG=${{ needs.Generate-Tag.outputs.tag_name }}
          FULLTAG=${{ needs.Generate-Tag.outputs.vfull }}       
          echo "Triggering GitLab Deploy for branch ${{ github.ref_name }} with tag $BUILDTAG"
          # Determine branch
          if [[ "${{ github.ref_name }}" =~ ^cicd/ ]]; then 
            GITLABBRANCH="dev"
          elif [ "${{ github.ref_name }}" == "dev" ]; then
            GITLABBRANCH="dev"
          elif [ "${{ github.ref_name }}" == "stg" ]; then
            GITLABBRANCH="stg"
          elif [ "${{ github.ref_name }}" == "main" ]; then
            GITLABBRANCH="main"
          else
            echo "❌ This branch is not configured to trigger GitLab pipelines."
            exit 1
          fi
          echo "✅ Sending Request to GitLab branch: $GITLABBRANCH"
          response=$(curl --silent \
            --request POST \
            --url "${{ vars.GITLAB_TRIGGER_URL }}" \
            --form "token=${{ secrets.GITLAB_TRIGGER_TOKEN }}" \
            --form "ref=$GITLABBRANCH" \
            --form "variables[SOURCE_REPO]=${{ github.repository }}" \
            --form "variables[SOURCE_BRANCH]=${{ github.ref_name }}" \
            --form "variables[GITHUB_VFULL]=$FULLTAG" \
            --form "variables[GITHUB_TAG]=$BUILDTAG")

          # Parse JSON response using jq
          gitlab_status=$(echo "$response" | jq -r '.status // "unknown"')
          gitlab_web_url=$(echo "$response" | jq -r '.web_url // "N/A"')

          # Log the response
          echo "GitLab Response: $response"

          # Validate the status field
          if [[ "$gitlab_status" =~ ^(created|preparing|success|running|scheduled)$ ]]; then
            echo "✅ GitLab pipeline triggered successfully! Status: $gitlab_status"
            echo "Pipeline details: $gitlab_web_url"
          else
            echo "❌ GitLab pipeline FAILED. Invalid status: $gitlab_status"
            echo "Pipeline details: $gitlab_web_url"
            exit 1
          fi
