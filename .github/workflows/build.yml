name: CI-CD

on:
  workflow_dispatch:
    inputs:
      build_container:
        description: "Build container image"
        required: true
        type: boolean

  push:
    branches:
      - main
      - dev
      - cicd/*

    paths: [".github/**", "src/**", "Dockerfile", "package.json", "LICENSE", "README.md"]

  pull_request:
    types: [opened, reopened, synchronize]
    paths: [".github/**", "src/**", "Dockerfile", "package.json", "LICENSE", "README.md"]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  TEST_ENV_VAR: "test"
  REACT_APP_CHAIN_ID: ${{ vars.REACT_APP_CHAIN_ID }}
  REACT_APP_CLONE_FACTORY: ${{ vars.REACT_APP_CLONE_FACTORY }}
  REACT_APP_INDEXER_URL: ${{ vars.REACT_APP_INDEXER_URL }}
  REACT_APP_ETHERSCAN_URL: ${{ vars.REACT_APP_ETHERSCAN_URL }}
  REACT_APP_LUMERIN_TOKEN_ADDRESS: ${{ vars.REACT_APP_LUMERIN_TOKEN_ADDRESS }}
  REACT_APP_USDC_TOKEN_ADDRESS: ${{ vars.REACT_APP_USDC_TOKEN_ADDRESS }}
  REACT_APP_READ_ONLY_ETH_NODE_URL: ${{ vars.REACT_APP_READ_ONLY_ETH_NODE_URL }}
  REACT_APP_VALIDATOR_REGISTRY_ADDRESS: ${{ vars.REACT_APP_VALIDATOR_REGISTRY_ADDRESS }}
  PORT: ${{ vars.PORT }}

jobs:
  Generate-Tag:
    runs-on: ubuntu-latest
    name: Generate Tag Name
    outputs:
      tag_name: ${{ steps.gen_tag_name.outputs.tag_name }}
      vtag: ${{ steps.gen_tag_name.outputs.vtag }}
      vfull: ${{ steps.gen_tag_name.outputs.vfull }}
      image_name: ${{ steps.gen_tag_name.outputs.image_name }}
      artifacts_base_url: ${{ github.server_url }}/${{ github.repository }}/releases/download/${{ steps.gen_tag_name.outputs.tag_name }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Determine tag name
        id: gen_tag_name
        shell: bash
        run: |
          IMAGE_NAME="ghcr.io/lumerin-protocol/proxy-router-ui"
          VMAJ_NEW=2
          VMIN_NEW=0
          VPAT_NEW=0
          set +o pipefail
          VLAST=$(git describe --tags --abbrev=0 --match='v[1-9]*' refs/remotes/origin/main 2>/dev/null | cut -c2-)

          if [ -n "$VLAST" ]; then
              eval $(echo "$VLAST" | awk -F '.' '{print "VMAJ="$1" VMIN="$2" VPAT="$3}')
          else
              VMAJ=0
              VMIN=0
              VPAT=0
          fi

          if [ "$GITHUB_REF_NAME" = "main" ]; then
              if [ "$VMAJ_NEW" -gt "$VMAJ" ]; then
                  VMAJ=$VMAJ_NEW
                  VMIN=$VMIN_NEW
                  VPAT=$VPAT_NEW
              else
                  VMIN=$((VMIN+1))
                  VPAT=0
              fi
              VFULL=${VMAJ}.${VMIN}.${VPAT}
              VTAG=v$VFULL
          else
              MB=$(git merge-base refs/remotes/origin/main HEAD)
              VPAT=$(git rev-list --count --no-merges ${MB}..HEAD)
              VFULL=${VMAJ}.${VMIN}.${VPAT}
              RNAME=${GITHUB_REF_NAME##*/}
              [ "$GITHUB_EVENT_NAME" = "pull_request" ] && RNAME=pr${GITHUB_REF_NAME%/merge}
              VTAG=v${VFULL}-${RNAME}
          fi

          # Output variables for use in subsequent jobs environment
          echo "::set-output name=tag_name::${VTAG}"
          echo "::set-output name=vtag::${VTAG}"
          echo "::set-output name=vfull::${VFULL}"
          echo "::set-output name=image_name::${IMAGE_NAME}"
          echo "✅ New Build Tag: $VTAG" >> $GITHUB_STEP_SUMMARY
          echo "✅ Docker Image: ${IMAGE_NAME}:${VTAG}" >> $GITHUB_STEP_SUMMARY
          echo "❌ Old Major Tag: $VLAST"  >> $GITHUB_STEP_SUMMARY

  Test-Build-Marketplace-Container:
    name: Test Build Marketplace Container
    if: 
      (
        (github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'dev')) ||
        (github.event_name == 'workflow_dispatch' && (github.event.inputs.build_container == 'true')) 
      )
    runs-on: ubuntu-latest
    needs: Generate-Tag
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Build Docker Image to Test
        run: |
          # Ensure we're in the workspace directory
          cd $GITHUB_WORKSPACE
          
          BUILDTAG=${{ needs.Generate-Tag.outputs.tag_name }}
          BUILDIMAGE=${{ needs.Generate-Tag.outputs.image_name }}
          BUILDCOMMIT=${{ github.sha }}
          docker build \
            --platform linux/amd64 \
            --build-arg TAG_NAME=$BUILDTAG \
            --build-arg COMMIT=$BUILDCOMMIT \
            --build-arg REACT_APP_CHAIN_ID=${{ env.REACT_APP_CHAIN_ID }} \
            --build-arg REACT_APP_CLONE_FACTORY=${{ env.REACT_APP_CLONE_FACTORY }} \
            --build-arg REACT_APP_INDEXER_URL=${{ env.REACT_APP_INDEXER_URL }} \
            --build-arg REACT_APP_ETHERSCAN_URL=${{ env.REACT_APP_ETHERSCAN_URL }} \
            --build-arg REACT_APP_LUMERIN_TOKEN_ADDRESS=${{ env.REACT_APP_LUMERIN_TOKEN_ADDRESS }} \
            --build-arg REACT_APP_USDC_TOKEN_ADDRESS=${{ env.REACT_APP_USDC_TOKEN_ADDRESS }} \
            --build-arg REACT_APP_READ_ONLY_ETH_NODE_URL=${{ env.REACT_APP_READ_ONLY_ETH_NODE_URL }} \
            --build-arg REACT_APP_VALIDATOR_REGISTRY_ADDRESS=${{ env.REACT_APP_VALIDATOR_REGISTRY_ADDRESS }} \
            --build-arg PORT=${{ env.PORT }} \
            --load \
            -t $BUILDIMAGE:$BUILDTAG \
            -f ./Dockerfile \
            . || (echo "❌ Failed to build image with tag: $BUILDIMAGE:$BUILDTAG" && exit 1)
          echo "✅ Marketplace Container Build Successful!"

  GHCR-Build-and-Push:
    name: Build & Push Docker Image
    if: |
      (
        (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')) ||
        (github.event_name == 'workflow_dispatch' && (github.event.inputs.build_container == 'true')) 
      )
    needs:
      - Generate-Tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Multi-Platform Docker Image
        run: |
          # Ensure we're in the workspace directory
          cd $GITHUB_WORKSPACE
          
          BUILDTAG=${{ needs.Generate-Tag.outputs.tag_name }}
          BUILDIMAGE=${{ needs.Generate-Tag.outputs.image_name }}
          BUILDCOMMIT=${{ github.sha }}
          FULLTAG=${{ needs.Generate-Tag.outputs.vfull }}
          
          # Debug: Show current directory and file existence
          pwd
          ls -la
          echo "Checking if package.json exists..."
          [ -f ./package.json ] && echo "package.json exists" || echo "package.json does not exist"
          echo "Injecting version $FULLTAG into package.json"
          sed -i "s/\"version\": \".*\"/\"version\": \"$FULLTAG\"/" ./package.json
          cat ./package.json | grep '"version"'  # Optional: Verify the change
          docker build \
            --platform linux/amd64 \
            --build-arg TAG_NAME=$BUILDTAG \
            --build-arg COMMIT=$BUILDCOMMIT \
            --build-arg REACT_APP_CHAIN_ID=${{ env.REACT_APP_CHAIN_ID }} \
            --build-arg REACT_APP_CLONE_FACTORY=${{ env.REACT_APP_CLONE_FACTORY }} \
            --build-arg REACT_APP_INDEXER_URL=${{ env.REACT_APP_INDEXER_URL }} \
            --build-arg REACT_APP_ETHERSCAN_URL=${{ env.REACT_APP_ETHERSCAN_URL }} \
            --build-arg REACT_APP_LUMERIN_TOKEN_ADDRESS=${{ env.REACT_APP_LUMERIN_TOKEN_ADDRESS }} \
            --build-arg REACT_APP_USDC_TOKEN_ADDRESS=${{ env.REACT_APP_USDC_TOKEN_ADDRESS }} \
            --build-arg REACT_APP_READ_ONLY_ETH_NODE_URL=${{ env.REACT_APP_READ_ONLY_ETH_NODE_URL }} \
            --build-arg REACT_APP_VALIDATOR_REGISTRY_ADDRESS=${{ env.REACT_APP_VALIDATOR_REGISTRY_ADDRESS }} \
            --build-arg PORT=${{ env.PORT }} \
            --push \
            -t $BUILDIMAGE:$BUILDTAG \
            -f ./Dockerfile \
            . || (echo "❌ Failed to push image with tag: $BUILDIMAGE:$BUILDTAG" && exit 1)
          echo "✅ Indexer Container Build and Push of $BUILDIMAGE:$BUILDTAG Successful!"

      - name: Optionally Push Latest Tag
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          BUILDIMAGE=${{ needs.Generate-Tag.outputs.image_name }}
          BUILDTAG=${{ needs.Generate-Tag.outputs.tag_name }}
          docker pull $BUILDIMAGE:$BUILDTAG || (echo "❌ Failed to pull image: $BUILDIMAGE:$BUILDTAG" && exit 1)
          docker tag $BUILDIMAGE:$BUILDTAG $BUILDIMAGE:latest || (echo "❌ Failed to tag image as :latest" && exit 1)
          docker push $BUILDIMAGE:latest || (echo "❌ Failed to push image as :latest" && exit 1)
          echo "✅ Indexer Container Push $BUILDIMAGE:latest Tag Successful!"

  GitLab-Deploy-Marketplace:
    name: Deploy Marketplace to GitLab
    if: |
      (
        (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))
      )
    needs:
      - Generate-Tag
      - GHCR-Build-and-Push
    runs-on: ubuntu-latest
    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Trigger GitLab Pipeline
        run: |
          BUILDTAG=${{ needs.Generate-Tag.outputs.tag_name }}
          FULLTAG=${{ needs.Generate-Tag.outputs.vfull }}       
          echo "Triggering GitLab Deploy for branch ${{ github.ref_name }} with tag $BUILDTAG"
          # Determine branch
          if [ "${{ github.ref_name }}" == "dev" ]; then
            GITLABBRANCH="dev"
          elif [ "${{ github.ref_name }}" == "main" ]; then
            GITLABBRANCH="main"
          else
            echo "❌ This branch is not configured to trigger GitLab pipelines."
            exit 1
          fi
          echo "✅ Sending Request to GitLab branch: $GITLABBRANCH"
          response=$(curl --silent \
            --request POST \
            --url "${{ vars.GITLAB_TRIGGER_URL }}" \
            --form "token=${{ secrets.GITLAB_TRIGGER_TOKEN }}" \
            --form "ref=$GITLABBRANCH" \
            --form "variables[SOURCE_REPO]=${{ github.repository }}" \
            --form "variables[SOURCE_BRANCH]=${{ github.ref_name }}" \
            --form "variables[GITHUB_VFULL]=$FULLTAG" \
            --form "variables[GITHUB_TAG]=$BUILDTAG")

          # Parse JSON response using jq
          gitlab_status=$(echo "$response" | jq -r '.status // "unknown"')
          gitlab_web_url=$(echo "$response" | jq -r '.web_url // "N/A"')

          # Log the response
          echo "GitLab Response: $response"

          # Validate the status field
          if [[ "$gitlab_status" =~ ^(created|preparing|success|running|scheduled)$ ]]; then
            echo "✅ GitLab pipeline triggered successfully! Status: $gitlab_status"
            echo "Pipeline details: $gitlab_web_url"
          else
            echo "❌ GitLab pipeline FAILED. Invalid status: $gitlab_status"
            echo "Pipeline details: $gitlab_web_url"
            exit 1
          fi
